//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Checkmarx.API.AST
{
    using Checkmarx.API.AST.Exceptions;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SASTResults
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SASTResults(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// get SAST results by Scan ID
        /// </summary>
        /// <param name="authorization">REQUIRED: JWT authorization token</param>
        /// <param name="accept">API version should be appended to this header</param>
        /// <param name="correlationId">correlation id to keep track of a flow if many APIs are involved</param>
        /// <param name="scan_id">filter by scan id</param>
        /// <param name="severity">filter by severity. OR operator between the items.</param>
        /// <param name="status">filter by status. OR operator between the items.</param>
        /// <param name="group">filter by group. matching groups that CONTAINES the input.</param>
        /// <param name="compliance">filter by compliance. matching groups that EQUALS the input with case insensitive.</param>
        /// <param name="query">filter by query. matching queries that CONTAINES the input.</param>
        /// <param name="language">filter by language name. matching languages that EQUALS the input with case insensitive.</param>
        /// <param name="query_ids">filter by queries ids. matching queries that EQUALS to the inputs.</param>
        /// <param name="node_ids">Node IDs to find. OR operator between the items.</param>
        /// <param name="source_file">filter by source file name.</param>
        /// <param name="source_file_operation">filter operation for source file.</param>
        /// <param name="source_node">filter by source node</param>
        /// <param name="source_node_operation">filter operation for source node</param>
        /// <param name="sink_node">filter by sink node</param>
        /// <param name="sink_node_operation">filter operation for sink node</param>
        /// <param name="sink_file">filter by sink file name</param>
        /// <param name="sink_file_operation">filter operation for sink file</param>
        /// <param name="include_nodes">if true returns ResultNode objects, otherwise will omit the Nodes field.</param>
        /// <param name="apply_predicates">if true will apply changes from predicates, otherwise will return the raw result.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set.</param>
        /// <param name="limit">The number of items to return.</param>
        /// <param name="sort">sorting ORDERED array. each string pattern "[-+]field". - mean ASC, + mean DESC.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> GetSASTResultsByScanAsync(string authorization, string accept, System.Guid? correlationId, string scan_id, System.Collections.Generic.IEnumerable<Anonymous> severity, System.Collections.Generic.IEnumerable<Anonymous2> status, string group, string compliance, string query, System.Collections.Generic.IEnumerable<string> language, System.Collections.Generic.IEnumerable<double> query_ids, System.Collections.Generic.IEnumerable<string> node_ids, string source_file, SourceFileOperation? source_file_operation, string source_node, SourceNodeOperation? source_node_operation, string sink_node, SinkNodeOperation? sink_node_operation, string sink_file, SinkFileOperation? sink_file_operation, bool? include_nodes, bool? apply_predicates, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous3> sort)
        {
            return GetSASTResultsByScanAsync(authorization, accept, correlationId, scan_id, severity, status, group, compliance, query, language, query_ids, node_ids, source_file, source_file_operation, source_node, source_node_operation, sink_node, sink_node_operation, sink_file, sink_file_operation, include_nodes, apply_predicates, offset, limit, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get SAST results by Scan ID
        /// </summary>
        /// <param name="authorization">REQUIRED: JWT authorization token</param>
        /// <param name="accept">API version should be appended to this header</param>
        /// <param name="correlationId">correlation id to keep track of a flow if many APIs are involved</param>
        /// <param name="scan_id">filter by scan id</param>
        /// <param name="severity">filter by severity. OR operator between the items.</param>
        /// <param name="status">filter by status. OR operator between the items.</param>
        /// <param name="group">filter by group. matching groups that CONTAINES the input.</param>
        /// <param name="compliance">filter by compliance. matching groups that EQUALS the input with case insensitive.</param>
        /// <param name="query">filter by query. matching queries that CONTAINES the input.</param>
        /// <param name="language">filter by language name. matching languages that EQUALS the input with case insensitive.</param>
        /// <param name="query_ids">filter by queries ids. matching queries that EQUALS to the inputs.</param>
        /// <param name="node_ids">Node IDs to find. OR operator between the items.</param>
        /// <param name="source_file">filter by source file name.</param>
        /// <param name="source_file_operation">filter operation for source file.</param>
        /// <param name="source_node">filter by source node</param>
        /// <param name="source_node_operation">filter operation for source node</param>
        /// <param name="sink_node">filter by sink node</param>
        /// <param name="sink_node_operation">filter operation for sink node</param>
        /// <param name="sink_file">filter by sink file name</param>
        /// <param name="sink_file_operation">filter operation for sink file</param>
        /// <param name="include_nodes">if true returns ResultNode objects, otherwise will omit the Nodes field.</param>
        /// <param name="apply_predicates">if true will apply changes from predicates, otherwise will return the raw result.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set.</param>
        /// <param name="limit">The number of items to return.</param>
        /// <param name="sort">sorting ORDERED array. each string pattern "[-+]field". - mean ASC, + mean DESC.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GetSASTResultsByScanAsync(string authorization, string accept, System.Guid? correlationId, string scan_id, System.Collections.Generic.IEnumerable<Anonymous> severity, System.Collections.Generic.IEnumerable<Anonymous2> status, string group, string compliance, string query, System.Collections.Generic.IEnumerable<string> language, System.Collections.Generic.IEnumerable<double> query_ids, System.Collections.Generic.IEnumerable<string> node_ids, string source_file, SourceFileOperation? source_file_operation, string source_node, SourceNodeOperation? source_node_operation, string sink_node, SinkNodeOperation? sink_node_operation, string sink_file, SinkFileOperation? sink_file_operation, bool? include_nodes, bool? apply_predicates, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous3> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (scan_id == null)
                throw new System.ArgumentNullException("scan_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/?");
            urlBuilder_.Append(System.Uri.EscapeDataString("scan-id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scan_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (severity != null)
            {
                foreach (var item_ in severity) { urlBuilder_.Append(System.Uri.EscapeDataString("severity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (status != null)
            {
                foreach (var item_ in status) { urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (group != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("group") + "=").Append(System.Uri.EscapeDataString(ConvertToString(group, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (compliance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("compliance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(compliance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (language != null)
            {
                foreach (var item_ in language) { urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (query_ids != null)
            {
                foreach (var item_ in query_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("query-ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (node_ids != null)
            {
                foreach (var item_ in node_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("node-ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (source_file != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("source-file") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source_file, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (source_file_operation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("source-file-operation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source_file_operation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (source_node != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("source-node") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source_node, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (source_node_operation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("source-node-operation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source_node_operation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sink_node != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sink-node") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sink_node, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sink_node_operation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sink-node-operation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sink_node_operation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sink_file != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sink-file") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sink_file, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sink_file_operation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sink-file-operation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sink_file_operation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (include_nodes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include-nodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include_nodes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (apply_predicates != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("apply-predicates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(apply_predicates, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));

                    if (correlationId != null)
                        request_.Headers.TryAddWithoutValidation("CorrelationId", ConvertToString(correlationId, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response2>("Invalid request supplied.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SastResult
    {
        /// <summary>
        /// ID of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ID { get; set; }

        /// <summary>
        /// ID of the path id system wide
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultHash { get; set; }

        /// <summary>
        /// Please use "resultHash" instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathSystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string PathSystemID { get; set; }

        /// <summary>
        /// Query ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int QueryID { get; set; }

        /// <summary>
        /// Query name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueryName { get; set; }

        /// <summary>
        /// Language name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageName { get; set; }

        /// <summary>
        /// Query group name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        /// <summary>
        /// Query Common Weakness Enumeration ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cweID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CweID { get; set; }

        /// <summary>
        /// Severity enum of a result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SastResultSeverity Severity { get; set; }

        /// <summary>
        /// ID of the Similarity feature (Indicator to identify a result by its first and last nodes)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("similarityID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SimilarityID { get; set; }

        [Newtonsoft.Json.JsonProperty("uniqueID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public int UniqueID { get; set; }

        /// <summary>
        /// Confidence Level of the exsitin of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confidenceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ConfidenceLevel { get; set; }

        /// <summary>
        /// array of the compliances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compliances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Compliances { get; set; }

        /// <summary>
        /// ID of the first scan id by resultHash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstScanID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstScanID { get; set; }

        /// <summary>
        /// date of the first found by resultHash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstFoundAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset FirstFoundAt { get; set; }

        /// <summary>
        /// ID created from queryMetaInfo + similarityID + files name. TODO WILL REMOVED! FOR TESTS!
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathSystemIDBySimiAndFilesPaths", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PathSystemIDBySimiAndFilesPaths { get; set; }

        /// <summary>
        /// Status enum of a result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SastResultStatus Status { get; set; }

        /// <summary>
        /// Creation date of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foundAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset FoundAt { get; set; }

        /// <summary>
        /// array of the nodes. will be included only if the include-nodes parameter is true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Nodes> Nodes { get; set; }

        /// <summary>
        /// state enum of a result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SastResultState State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResultNode
    {
        /// <summary>
        /// Column position of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("column", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Column { get; set; }

        /// <summary>
        /// Full file name of the containing source file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// FQN of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>
        /// Length of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// Line position of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Line { get; set; }

        /// <summary>
        /// Line position of the containing method
        /// </summary>
        [Newtonsoft.Json.JsonProperty("methodLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MethodLine { get; set; }

        /// <summary>
        /// node name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// node DomType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DomType { get; set; }

        /// <summary>
        /// Please use "nodeHash" instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeSystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string NodeSystemID { get; set; }

        /// <summary>
        /// ID of the customer tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeHash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Severity enum of a result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SeverityEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 3,

    }

    /// <summary>
    /// Status enum of a result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum StatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT")]
        RECURRENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 2,

    }

    /// <summary>
    /// Operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OperationEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS")]
        CONTAINS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_CONTAINS")]
        NOT_CONTAINS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUAL")]
        EQUAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EQUAL")]
        NOT_EQUAL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebError
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Code { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Severity enum of a result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 3,

    }

    /// <summary>
    /// Status enum of a result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT")]
        RECURRENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 2,

    }

    /// <summary>
    /// Operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SourceFileOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS")]
        CONTAINS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_CONTAINS")]
        NOT_CONTAINS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUAL")]
        EQUAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EQUAL")]
        NOT_EQUAL = 3,

    }

    /// <summary>
    /// Operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SourceNodeOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS")]
        CONTAINS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_CONTAINS")]
        NOT_CONTAINS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUAL")]
        EQUAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EQUAL")]
        NOT_EQUAL = 3,

    }

    /// <summary>
    /// Operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SinkNodeOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS")]
        CONTAINS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_CONTAINS")]
        NOT_CONTAINS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUAL")]
        EQUAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EQUAL")]
        NOT_EQUAL = 3,

    }

    /// <summary>
    /// Operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SinkFileOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS")]
        CONTAINS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_CONTAINS")]
        NOT_CONTAINS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUAL")]
        EQUAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EQUAL")]
        NOT_EQUAL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"-severity")]
        Minusseverity = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"+severity")]
        Plusseverity = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"-status")]
        Minusstatus = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"+status")]
        Plusstatus = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-firstfoundat")]
        Minusfirstfoundat = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+firstfoundat")]
        Plusfirstfoundat = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"-foundat")]
        Minusfoundat = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"+foundat")]
        Plusfoundat = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"-queryname")]
        Minusqueryname = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"+queryname")]
        Plusqueryname = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-firstscanid")]
        Minusfirstscanid = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+firstscanid")]
        Plusfirstscanid = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Results> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Code { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SastResultSeverity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SastResultStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT")]
        RECURRENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Nodes
    {
        /// <summary>
        /// Column position of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("column", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Column { get; set; }

        /// <summary>
        /// Full file name of the containing source file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// FQN of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>
        /// Length of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// Line position of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Line { get; set; }

        /// <summary>
        /// Line position of the containing method
        /// </summary>
        [Newtonsoft.Json.JsonProperty("methodLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MethodLine { get; set; }

        /// <summary>
        /// node name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// node DomType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DomType { get; set; }

        /// <summary>
        /// Please use "nodeHash" instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeSystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string NodeSystemID { get; set; }

        /// <summary>
        /// ID of the customer tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeHash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SastResultState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TO_VERIFY")]
        TO_VERIFY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EXPLOITABLE")]
        NOT_EXPLOITABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROPOSED_NOT_EXPLOITABLE")]
        PROPOSED_NOT_EXPLOITABLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"URGENT")]
        URGENT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Results
    {
        /// <summary>
        /// ID of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ID { get; set; }

        /// <summary>
        /// ID of the path id system wide
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultHash { get; set; }

        /// <summary>
        /// Please use "resultHash" instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathSystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string PathSystemID { get; set; }

        /// <summary>
        /// Query ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int QueryID { get; set; }

        /// <summary>
        /// Query name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueryName { get; set; }

        /// <summary>
        /// Language name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageName { get; set; }

        /// <summary>
        /// Query group name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        /// <summary>
        /// Query Common Weakness Enumeration ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cweID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CweID { get; set; }

        /// <summary>
        /// Severity enum of a result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsSeverity Severity { get; set; }

        /// <summary>
        /// ID of the Similarity feature (Indicator to identify a result by its first and last nodes)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("similarityID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SimilarityID { get; set; }

        [Newtonsoft.Json.JsonProperty("uniqueID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public int UniqueID { get; set; }

        /// <summary>
        /// Confidence Level of the exsitin of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confidenceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ConfidenceLevel { get; set; }

        /// <summary>
        /// array of the compliances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compliances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Compliances { get; set; }

        /// <summary>
        /// ID of the first scan id by resultHash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstScanID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstScanID { get; set; }

        /// <summary>
        /// date of the first found by resultHash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstFoundAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset FirstFoundAt { get; set; }

        /// <summary>
        /// ID created from queryMetaInfo + similarityID + files name. TODO WILL REMOVED! FOR TESTS!
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathSystemIDBySimiAndFilesPaths", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PathSystemIDBySimiAndFilesPaths { get; set; }

        /// <summary>
        /// Status enum of a result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsStatus Status { get; set; }

        /// <summary>
        /// Creation date of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foundAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset FoundAt { get; set; }

        /// <summary>
        /// array of the nodes. will be included only if the include-nodes parameter is true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Nodes2> Nodes { get; set; }

        /// <summary>
        /// state enum of a result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsState State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ResultsSeverity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ResultsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT")]
        RECURRENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Nodes2
    {
        /// <summary>
        /// Column position of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("column", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Column { get; set; }

        /// <summary>
        /// Full file name of the containing source file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// FQN of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>
        /// Length of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// Line position of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Line { get; set; }

        /// <summary>
        /// Line position of the containing method
        /// </summary>
        [Newtonsoft.Json.JsonProperty("methodLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MethodLine { get; set; }

        /// <summary>
        /// node name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// node DomType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DomType { get; set; }

        /// <summary>
        /// Please use "nodeHash" instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeSystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string NodeSystemID { get; set; }

        /// <summary>
        /// ID of the customer tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeHash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ResultsState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TO_VERIFY")]
        TO_VERIFY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EXPLOITABLE")]
        NOT_EXPLOITABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROPOSED_NOT_EXPLOITABLE")]
        PROPOSED_NOT_EXPLOITABLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"URGENT")]
        URGENT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603